// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  fullName String
  username String @unique
  salt     String
  hash     String
  createdAt DateTime @default(now())
  folders Folder[]
}

model Folder {
  id         String   @id @default(uuid())
  name       String
  isRoot     Boolean  @default(false) // True if it's the root folder
  userId     Int   // Link to the user
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  parentId   String?  // Nullable, means this can be a root folder
  parent     Folder?  @relation("Subfolders", fields: [parentId], references: [id], onDelete: Cascade)

  subfolders Folder[] @relation("Subfolders")

  files      File[]
  createdAt  DateTime @default(now())

  @@unique([name, parentId]) // Prevents duplicate folder names in the same directory
  //@@unique([userId, isRoot]) // Ensures only ONE root folder per user
}


model File {
  id        String  @id @default(uuid())
  name      String  // user-facing name, can be altered
  fileName  String  // Stored filename with timestamp
  url       String  // Cloud storage URL (e.g., Cloudinary)
  folderId  String // Nullable in case a file is in "root"
  folder    Folder @relation(fields: [folderId], references: [id], onDelete: Cascade) 
  createdAt DateTime @default(now())
  fileType String  // storing the MIME type
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String  
  expiresAt   DateTime
}


